"use strict";(self.webpackChunkatomik_docs=self.webpackChunkatomik_docs||[]).push([[677],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(a),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return a?n.createElement(f,l(l({ref:t},c),{},{components:a})):n.createElement(f,l({ref:t},c))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),o=a(6010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(7462),o=a(7294),r=a(6010),l=a(2466),i=a(6550),s=a(1980),u=a(7392),c=a(12);function m(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:o}}=e;return{value:t,label:a,attributes:n,default:o}}))}function p(e){const{values:t,children:a}=e;return(0,o.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=p(e),[l,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[s,u]=f({queryString:a,groupId:n}),[m,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,c.Nk)(a);return[n,(0,o.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),y=(()=>{const e=s??m;return d({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),h(e)}),[u,h,r]),tabValues:r}}var y=a(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),p=e=>{const t=e.currentTarget,a=c.indexOf(t),n=u[a].value;n!==i&&(m(t),s(n))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:p},l,{className:(0,r.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":i===t})}),a??t)})))}function k(e){let{lazy:t,children:a,selectedValue:n}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===n));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=h(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},o.createElement(g,(0,n.Z)({},e,t)),o.createElement(k,(0,n.Z)({},e,t)))}function w(e){const t=(0,y.Z)();return o.createElement(v,(0,n.Z)({key:String(t)},e))}},2501:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var n=a(7462),o=(a(7294),a(3905)),r=a(4866),l=a(5162);const i={sidebar_position:1},s=void 0,u={unversionedId:"Intro",id:"Intro",title:"Intro",description:"Atomik is a Kotlin Multiplatform library that acts as an implementation of a design system in your shared code. It allows you to share design information in common code, and apply it to your UI with ease.",source:"@site/docs/Intro.mdx",sourceDirName:".",slug:"/Intro",permalink:"/Atomik/docs/Intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Intro.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Using Atoms",permalink:"/Atomik/docs/using-atoms"}},c={},m=[{value:"What is Atomic Design",id:"what-is-atomic-design",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Example",id:"example",level:3},{value:"Atom",id:"atom",level:4},{value:"Design System",id:"design-system",level:4},{value:"Platform Code",id:"platform-code",level:4}],p={toc:m},d="wrapper";function f(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Atomik is a Kotlin Multiplatform library that acts as an implementation of a design system in your shared code. It allows you to share design information in common code, and apply it to your UI with ease."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Atomik is in an experimental early stage, and should be used for testing purposes only.")),(0,o.kt)("h3",{id:"what-is-atomic-design"},"What is Atomic Design"),(0,o.kt)("p",null,"First off, Atomik is based around Atomic Design. If you are unfamiliar with that concept please learn more ",(0,o.kt)("a",{parentName:"p",href:"https://bradfrost.com/blog/post/atomic-web-design/"},"here")),(0,o.kt)("p",null,"In short, atomic design is methodology for creating design systems, in which you create components that can be made up of sub-components, similarly to atoms and molecules."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"For example"),": a Search Bar Organism can contain a Button molecule and a Text Field atom together.")),(0,o.kt)("p",null,"The first layer of components are known as atoms, and are generally a single UI element such as a Text View. Each atom contains color, typography and iconography data when applicable."),(0,o.kt)("h1",{id:"installation"},"Installation"),(0,o.kt)("p",null,"The Atomik dependency is located in Maven Central, and should be added to your commonMain source set in your Kotlin Multiplatform module."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation("io.github.kevinschildhorn:atomik:X.Y.Z")\n')),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"As this library is evolving some logic may change.")),(0,o.kt)("p",null,"Atomik has a lot of components and can be hard to jump into. Documentation on each aspect can be found under ",(0,o.kt)("a",{parentName:"p",href:"./category/core-concepts"},"Core Concepts"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Components"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./core-concepts/atoms"},"Atoms")," - The building blocks of Atomik. Modular UI data that can be applied to UI elements"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./core-concepts/molecules"},"Molecules and beyond")," - A hierarchy of atom groups, each containing multiple of their respective subgroup"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Atomik/docs/core-concepts/design-systems"},"Design Systems")," - A collection of Atoms, Colors, Typographies and Iconographies.")),(0,o.kt)("p",null,"In addition to components, Atomik has specific shared UI details:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./core-concepts/colors"},"AtomikColor")," - A common representation of Color, either with Hex or RGBA values"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./core-concepts/typography"},"AtomikTypography")," - A common representation of Typography, such as font, size, and weight."),(0,o.kt)("li",{parentName:"ul"},"AtomikIconography - TBD")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"While it's recommended to read more of the core concepts first, here is a preview of what an ",(0,o.kt)("inlineCode",{parentName:"p"},"Atomik")," design system looks like."),(0,o.kt)("h4",{id:"atom"},"Atom"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val color = AtomikColor(r = 100, g = 100, b = 100, a = null)\n\nval sampleAtom = FigmaShapeAtom(\n    constraintX = AtomikConstraintX.ALIGN_LEFT,\n    constraintY = AtomikConstraintY.ALIGN_TOP,\n    color = color,\n)\n")),(0,o.kt)("h4",{id:"design-system"},"Design System"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val color = AtomikColor(r = 100, g = 100, b = 100, a = null)\nval typography = AtomikTypography(size = 14)\n\nval colorSet = DefaultColorSet(\n    primary = color,\n    ...\n)\n\nval typographySet = DefaultTypographySet(\n    body = typography,\n    ...\n)\n\nval designSystem = DefaultDesignSystem(\n    colorSet = colorSet,\n    typographySet = typographySet,\n    components = mapOf("sample" to sampleAtom),\n    fontFamily = null,\n)\n')),(0,o.kt)("h4",{id:"platform-code"},"Platform Code"),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"These calls will be updated in the future to be more generalized")),(0,o.kt)(r.Z,{defaultValue:"android-xml",values:[{label:"Android (XML)",value:"android-xml"},{label:"Android (Compose)",value:"android-compose"},{label:"iOS (UIView)",value:"ios-view"},{label:"iOS (SwiftUI)",value:"ios-swiftui"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"android-xml",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"view.applyColorAtom(yourAtom)\n"))),(0,o.kt)(l.Z,{value:"android-compose",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Box(modifier = Modifier.atomikColor(yourAtom))\n"))),(0,o.kt)(l.Z,{value:"ios-view",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"TODO\n"))),(0,o.kt)(l.Z,{value:"ios-swiftui",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"TODO\n")))))}f.isMDXComponent=!0}}]);