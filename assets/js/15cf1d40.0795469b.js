"use strict";(self.webpackChunkatomik_docs=self.webpackChunkatomik_docs||[]).push([[8],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>f});var o=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=o.createContext({}),c=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=c(t.components);return o.createElement(s.Provider,{value:e},t.children)},m="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?o.createElement(f,i(i({ref:e},u),{},{components:n})):o.createElement(f,i({ref:e},u))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[m]="string"==typeof t?t:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9920:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:2},i="Using Atoms",l={unversionedId:"using-atoms",id:"using-atoms",title:"Using Atoms",description:"Android",source:"@site/docs/using-atoms.md",sourceDirName:".",slug:"/using-atoms",permalink:"/Atomik/docs/using-atoms",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/using-atoms.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/Atomik/docs/Intro"},next:{title:"Core Concepts",permalink:"/Atomik/docs/category/core-concepts"}},s={},c=[{value:"Android",id:"android",level:2},{value:"iOS",id:"ios",level:2}],u={toc:c},m="wrapper";function p(t){let{components:e,...n}=t;return(0,r.kt)(m,(0,o.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-atoms"},"Using Atoms"),(0,r.kt)("h2",{id:"android"},"Android"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun PrimaryButton(\n    text: String,\n    onClick: () -> Unit,\n) {\n    val molecule: TextButtonMolecule = DesignAtoms.Buttons.primaryButtonMolecule\n    val buttonAtom = molecule.buttonAtom\n    TextButton(\n        onClick = onClick,\n        colors = buttonAtom.enabledColor.buttonColors(),\n        shape = buttonAtom.shape,\n        modifier = buttonAtom.heightModifier\n    ) {\n        val textAtom = molecule.textAtom\n        Text(\n            text,\n            color = textAtom.textColor.platformColor,\n            style = textAtom.textStyle(fontFamily),\n        )\n    }\n}\n")),(0,r.kt)("p",null,"Here we're creating a composable Button, which is a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextButton")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," inside."),(0,r.kt)("p",null,"In this example we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Molecule"),", which contains two ",(0,r.kt)("inlineCode",{parentName:"p"},"Atoms"),", one for the button and one for the text inside\nsince compose is available in KMP we are able to use shapes, textStyles, and other compose classes easily."),(0,r.kt)("h2",{id:"ios"},"iOS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"    let text: String\n    let action: () -> Void\n    \n    var font: Font? {\n        var font: Font?\n        if let uiFont: UIFont = molecule.textAtom.uiFont {\n            font = Font(uiFont)\n        }\n        return font\n    }\n\n    var body: some View {\n\n        let buttonAtom = molecule.buttonAtom\n        let textAtom: AtomikTextViewAtom = molecule.textAtom\n\n        let height = buttonAtom.height.map { CGFloat(truncating: $0) }\n\n        Button(action: action, label: {\n            Text(text)\n                .padding()\n                .frame(height: height)\n                .background(Color(buttonColor))\n                .foregroundColor(Color(textAtom.textColor.platformColor))\n                .font(font)\n                .cornerRadius(CGFloat(buttonAtom.radius))\n        })\n        .disabled(!enabled)\n    }\n")),(0,r.kt)("p",null,"In iOS we have something similar, we have the molecule and the atoms, and are passing them into the ",(0,r.kt)("inlineCode",{parentName:"p"},"SwiftUI Views"),". Unfortunately KMP only supports ",(0,r.kt)("inlineCode",{parentName:"p"},"UIKit")," and not ",(0,r.kt)("inlineCode",{parentName:"p"},"SwiftUI")," so some conversions are needed."))}p.isMDXComponent=!0}}]);