"use strict";(self.webpackChunkatomik_docs=self.webpackChunkatomik_docs||[]).push([[450],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),o=n(6010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>A});var a=n(7462),o=n(7294),r=n(6010),l=n(2466),i=n(6550),s=n(1980),u=n(7392),c=n(12);function m(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function p(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=p(e),[l,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,u]=f({queryString:n,groupId:a}),[m,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),h=(()=>{const e=s??m;return d({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),b(e)}),[u,b,r]),tabValues:r}}var h=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(m(t),s(a))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:p},l,{className:(0,r.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=b(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",k.tabList)},o.createElement(y,(0,a.Z)({},e,t)),o.createElement(v,(0,a.Z)({},e,t)))}function A(e){const t=(0,h.Z)();return o.createElement(g,(0,a.Z)({key:String(t)},e))}},5206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var a=n(7462),o=(n(7294),n(3905)),r=n(4866),l=n(5162);const i={sidebar_position:1},s="Atoms",u={unversionedId:"core-concepts/atoms",id:"core-concepts/atoms",title:"Atoms",description:"Atoms are the defining feature in Atomic Design, and are the building blocks of Atomik. They're modular UI data that can be applied to the UI.",source:"@site/docs/core-concepts/atoms.mdx",sourceDirName:"core-concepts",slug:"/core-concepts/atoms",permalink:"/Atomik/docs/core-concepts/atoms",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts/atoms.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Core Concepts",permalink:"/Atomik/docs/category/core-concepts"},next:{title:"Molecules and Beyond",permalink:"/Atomik/docs/core-concepts/molecules"}},c={},m=[{value:"Defining Atoms",id:"defining-atoms",level:2},{value:"Preset Atoms",id:"preset-atoms",level:3},{value:"Applying Atoms",id:"applying-atoms",level:2}],p={toc:m},d="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"atoms"},"Atoms"),(0,o.kt)("p",null,"Atoms are the defining feature in Atomic Design, and are the building blocks of Atomik. They're modular UI data that can be applied to the UI."),(0,o.kt)("p",null,"In Atomik, Atoms are an abstract class that contain information about a UI Element and should be inherited and customized."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public abstract class Atom {\n    public abstract val type: AtomType\n    public open val subComponents: List<Atom>\n}\n")),(0,o.kt)("p",null,"Each atom has optional subcomponents, as well as an ",(0,o.kt)("inlineCode",{parentName:"p"},"AtomType")," which is the type of UI element associated with this Atom. "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The structure of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Atom")," is prone to change as development goes on, but the concept to remain the same.")),(0,o.kt)("p",null,"Then in addition to this base ",(0,o.kt)("inlineCode",{parentName:"p"},"Atom"),", there are multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"AtomInterfaces"),", which can then define more UI Details. One example of this is the ",(0,o.kt)("inlineCode",{parentName:"p"},"ColorAtom"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public interface ColorAtom : AtomInterface {\n    public val color: AtomikColor\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For example a Text View may have an atom that is a ",(0,o.kt)("inlineCode",{parentName:"p"},"ColorAtom")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"TextAtom"),".")),(0,o.kt)("h2",{id:"defining-atoms"},"Defining Atoms"),(0,o.kt)("p",null,"You may want to create a custom atom for a specific element by adding the ",(0,o.kt)("inlineCode",{parentName:"p"},"AtomInterfaces")," that you want."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"public class MyAtom(\n    override val color: AtomikColor,\n    override val borderColor: AtomikColor = color,\n) : Atom(), ColorAtom, BorderedAtom {\n    override val type: AtomType = AtomType.VIEW\n}\n")),(0,o.kt)("p",null,"Here we've added a ",(0,o.kt)("inlineCode",{parentName:"p"},"ColorAtom")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"BorderAtom"),", which are then implemented in the constructor. More Atoms can be found in the ",(0,o.kt)("a",{parentName:"p",href:"../category/atoms"},"Atoms")," section."),(0,o.kt)("h3",{id:"preset-atoms"},"Preset Atoms"),(0,o.kt)("p",null,"In addition to creating your own custom Atoms, Atomik also contains some preset atoms for ease of use. You can find them under ",(0,o.kt)("a",{parentName:"p",href:"/Atomik/docs/atoms/preset-atoms"},"preset atoms"),". One example of a preset is the ",(0,o.kt)("inlineCode",{parentName:"p"},"FigmaShapeAtom")," which contains data generally entered in a Figma component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val color = AtomikColor(r = 100, g = 100, b = 100, a = null)\n\nval sampleAtom = FigmaShapeAtom(\n    constraintX = AtomikConstraintX.ALIGN_LEFT,\n    constraintY = AtomikConstraintY.ALIGN_TOP,\n    color = color,\n)\n")),(0,o.kt)("p",null,"This can be useful when your designer is using Figma for your project. If you look under the hood, you can see that this is really an Atom that implements the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ColorAtom"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"PaddingAtom"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"FixedSizeAtom"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"ConstrainedAtom")),(0,o.kt)("h2",{id:"applying-atoms"},"Applying Atoms"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This section is under construction")),(0,o.kt)("p",null,"Once you've defined your atoms in shared code, you'll need to apply them to your UI elements. "),(0,o.kt)(r.Z,{defaultValue:"android-xml",values:[{label:"Android (XML)",value:"android-xml"},{label:"Android (Compose)",value:"android-compose"},{label:"iOS (UIView)",value:"ios-view"},{label:"iOS (SwiftUI)",value:"ios-swiftui"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"android-xml",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"view.applyColorAtom(yourAtom)\n"))),(0,o.kt)(l.Z,{value:"android-compose",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Box(modifier = Modifier.atomikColor(yourAtom))\n"))),(0,o.kt)(l.Z,{value:"ios-view",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"TODO\n"))),(0,o.kt)(l.Z,{value:"ios-swiftui",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"TODO\n")))))}f.isMDXComponent=!0}}]);