"use strict";(self.webpackChunkatomik_docs=self.webpackChunkatomik_docs||[]).push([[425],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>b});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=r.createContext({}),s=function(e){var t=r.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(o),d=n,b=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return o?r.createElement(b,c(c({ref:t},p),{},{components:o})):r.createElement(b,c({ref:t},p))}));function b(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,c=new Array(a);c[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:n,c[1]=l;for(var s=2;s<a;s++)c[s]=o[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},1074:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:4},c="Colors",l={unversionedId:"core-concepts/colors",id:"core-concepts/colors",title:"Colors",description:"Atomik has its own custom Color object called AtomikColor. It is located in the common code so it can be shared between platforms.",source:"@site/docs/core-concepts/colors.md",sourceDirName:"core-concepts",slug:"/core-concepts/colors",permalink:"/Atomik/docs/core-concepts/colors",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts/colors.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Design System",permalink:"/Atomik/docs/core-concepts/design-systems"},next:{title:"Typography",permalink:"/Atomik/docs/core-concepts/typography"}},i={},s=[{value:"Creating a color",id:"creating-a-color",level:2}],p={toc:s},u="wrapper";function m(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"colors"},"Colors"),(0,n.kt)("p",null,"Atomik has its own custom Color object called ",(0,n.kt)("inlineCode",{parentName:"p"},"AtomikColor"),". It is located in the common code so it can be shared between platforms."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"public expect class AtomikColor {\n\n    public val hexString: String\n    public val r: Int\n    public val g: Int\n    public val b: Int\n    public val a: Float\n\n    public constructor(hex: Long)\n    public constructor(r: Int, g: Int, b: Int, a: Float? = null)\n}\n")),(0,n.kt)("h2",{id:"creating-a-color"},"Creating a color"),(0,n.kt)("p",null,"AtomikColors can be created either with an RGBA value or with a hex value, represented as a Long. Both support an optional alpha value"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"AtomikColor(0xFFFFFF)\nAtomikColor(r = 255, g = 255, b = 255)\n// With Alpha\nAtomikColor(0xFFFFFF00)\nAtomikColor(r = 255, g = 255, b = 255, a = 0)\n")),(0,n.kt)("p",null,"After creating ",(0,n.kt)("inlineCode",{parentName:"p"},"AtomikColor")," they should be added into your  ",(0,n.kt)("a",{parentName:"p",href:"./design-systems#colorset"},"Color Set"),")"))}m.isMDXComponent=!0}}]);