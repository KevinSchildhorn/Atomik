"use strict";(self.webpackChunkatomik_docs=self.webpackChunkatomik_docs||[]).push([[340],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>f});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),i=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=i(o),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return o?n.createElement(f,a(a({ref:t},p),{},{components:o})):n.createElement(f,a({ref:t},p))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=o.length,a=new Array(l);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,a[1]=c;for(var i=2;i<l;i++)a[i]=o[i];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},2721:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>i});var n=o(7462),r=(o(7294),o(3905));const l={sidebar_position:2},a="Molecules and Beyond",c={unversionedId:"core-concepts/molecules",id:"core-concepts/molecules",title:"Molecules and Beyond",description:"Molecules",source:"@site/docs/core-concepts/molecules.md",sourceDirName:"core-concepts",slug:"/core-concepts/molecules",permalink:"/Atomik/docs/core-concepts/molecules",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts/molecules.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Atoms",permalink:"/Atomik/docs/core-concepts/atoms"},next:{title:"Design System",permalink:"/Atomik/docs/core-concepts/design-systems"}},s={},i=[{value:"Molecules",id:"molecules",level:2}],p={toc:i},u="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"molecules-and-beyond"},"Molecules and Beyond"),(0,r.kt)("h2",{id:"molecules"},"Molecules"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Molecules")," are made up of multiple atoms."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"abstract class BaseMolecule {\n    abstract val atoms: List<Atom>\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Molecules")," can also implement Atom interfaces. You can either hold all the atoms in the ",(0,r.kt)("inlineCode",{parentName:"p"},"List"),", or hold references to specific atoms. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TextButtonMolecule(\n    color: AtomikColor,\n    disabledColor: AtomikColor,\n    radius: Int = 0,\n    height: Int?,\n    textColor: AtomikColor,\n    typography: AtomikTypography,\n    fontFamily: AtomikFontFamily?,\n) : BaseMolecule() {\n\n    val buttonAtom = ButtonAtom(\n        enabledColor = AtomikEnabledColor(color, disabledColor),\n        radius = radius,\n        height = height\n    )\n\n    val textAtom = TextViewAtom(\n        textColor = textColor,\n        typography = typography,\n        fontFamily = fontFamily,\n    )\n\n\n    override val atoms: List<Atom> = listOf(buttonAtom, textAtom)\n}\n")))}m.isMDXComponent=!0}}]);